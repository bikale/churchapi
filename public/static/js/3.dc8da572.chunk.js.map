{"version":3,"sources":["Components/UI/Admin/input.js","Components/UI/Admin/UpdateBook.js"],"names":["input","props","console","log","singledata","_id","inputtype","type","label","value","Name","onChange","event","onchanged","className","imageurl","author","price","title","description","htmlFor","UpdateForm","this","getonebookeventhandler","match","params","id","preventDefault","onupdateeventhander","history","push","UpdateBookFormArray","key","addbookform","configElem","map","item","data","lable","inputeventhandler1","onClick","updateHandler","Component","connect","state","admin","dispatch","fechsinglebook"],"mappings":"kKAsFeA,EApFD,SAACC,GACbC,QAAQC,IAAIF,EAAMG,WAAWC,IAAK,WAClCH,QAAQC,IAAIF,GAEZ,IAAIK,EAAY,KAuEhB,MAtEmB,SAAfL,EAAMM,MAAmC,SAAhBN,EAAMO,QACjCF,EACE,2BACEG,MAAK,UAAKR,EAAMG,WAAWM,MAC3BC,SAAU,SAACC,GAETX,EAAMY,UAAUD,IAElBE,UAAU,kBAIG,SAAfb,EAAMM,MAAmC,UAAhBN,EAAMO,QACjCF,EACE,2BACEG,MAAK,UAAKR,EAAMG,WAAWW,UAC3BJ,SAAU,SAACC,GACTX,EAAMY,UAAUD,IAElBE,UAAU,kBAIG,SAAfb,EAAMM,MAAmC,WAAhBN,EAAMO,QACjCF,EACE,2BACEG,MAAK,UAAKR,EAAMG,WAAWY,QAC3BL,SAAU,SAACC,GACTX,EAAMY,UAAUD,IAElBE,UAAU,kBAIG,WAAfb,EAAMM,MAAqC,UAAhBN,EAAMO,QACnCF,EACE,2BACEG,MAAK,UAAKR,EAAMG,WAAWa,OAC3BN,SAAU,SAACC,GACTX,EAAMY,UAAUD,IAElBE,UAAU,kBAKG,SAAfb,EAAMM,MAAmC,eAAhBN,EAAMO,QACjCF,EACE,2BACEG,MAAK,UAAKR,EAAMG,WAAWc,OAC3BP,SAAU,SAACC,GACTX,EAAMY,UAAUD,IAElBE,UAAU,kBAKG,aAAfb,EAAMM,OACRD,EACE,8BACEG,MAAK,UAAKR,EAAMG,WAAWe,aAC3BR,SAAU,SAACC,GACTX,EAAMY,UAAUD,IAElBE,UAAU,kBAOd,6BACE,2BAAOM,QAAQ,IAAf,IAAoBnB,EAAMO,OACzBF,I,QC3EDe,E,kLAGFC,KAAKrB,MAAMsB,uBAAuBD,KAAKrB,MAAMuB,MAAMC,OAAOC,M,oCAG9Cd,GACZA,EAAMe,iBACNL,KAAKrB,MAAM2B,oBAAoBN,KAAKrB,MAAMuB,MAAMC,OAAOC,IACvDJ,KAAKrB,MAAM4B,QAAQC,KAAK,kB,+BAGhB,IAAD,OACP5B,QAAQC,IAAImB,KAAKrB,OACjB,IAAI8B,EAAsB,GAE1B,IAAK,IAAIC,KAAOV,KAAKrB,MAAMgC,YACzBF,EAAoBD,KAAK,CACvBJ,GAAIM,EACJE,WAAYZ,KAAKrB,MAAMgC,YAAYD,KAIvC,OACE,6BACE,yBAAKlB,UAAU,qDACb,8BACGiB,EAAoBI,KAAI,SAACC,GAAD,OACvB,kBAAC,EAAD,CAEEJ,IAAKI,EAAKV,GACVtB,WAAY,EAAKH,MAAMoC,KACvBX,GAAIU,EAAKV,GACTlB,MAAO4B,EAAKF,WAAWI,MACvB/B,KAAM6B,EAAKF,WAAW3B,KAEtBM,UAAW,SAACD,GAAD,OACT,EAAKX,MAAMsC,mBAAmB3B,EAAOwB,EAAKV,UAKhD,6BACE,6BACA,6BACA,4BACEZ,UAAU,kBACV0B,QAAS,SAAC5B,GACR,EAAK6B,cAAc7B,KAHvB,kB,GA7CW8B,aA+EVC,uBAlBS,SAACC,GACvB,OAAO,eAAKA,EAAMC,UAGO,SAACC,GAC1B,MAAO,CAELP,mBAAoB,SAAC3B,EAAOc,GAAR,OAClBoB,EAAS,CAAEvC,KAAM,cAAeK,MAAOA,EAAOc,GAAIA,KAEpDH,uBAAwB,SAACG,GAAD,OAAQoB,EAASC,YAAerB,KAExDE,oBAAqB,SAAChB,EAAOc,GAC3BoB,EAAS,CAAEvC,KAAM,aAAcmB,GAAIA,QAK1BiB,CAA6CtB","file":"static/js/3.dc8da572.chunk.js","sourcesContent":["import React from 'react';\n\nconst input = (props) => {\n  console.log(props.singledata._id, 'fddfdfd');\n  console.log(props);\n  // checking all my input type with if statment and assigning input value\n  let inputtype = null;\n  if (props.type === 'text' && props.label === 'Name') {\n    inputtype = (\n      <input\n        value={`${props.singledata.Name}`}\n        onChange={(event) => {\n          // getting the function from parent component\n          props.onchanged(event);\n        }}\n        className=\"form-control\"\n      ></input>\n    );\n  }\n  if (props.type === 'text' && props.label === 'Image') {\n    inputtype = (\n      <input\n        value={`${props.singledata.imageurl}`}\n        onChange={(event) => {\n          props.onchanged(event);\n        }}\n        className=\"form-control\"\n      ></input>\n    );\n  }\n  if (props.type === 'text' && props.label === 'Author') {\n    inputtype = (\n      <input\n        value={`${props.singledata.author}`}\n        onChange={(event) => {\n          props.onchanged(event);\n        }}\n        className=\"form-control\"\n      ></input>\n    );\n  }\n  if (props.type === 'number' && props.label === 'Price') {\n    inputtype = (\n      <input\n        value={`${props.singledata.price}`}\n        onChange={(event) => {\n          props.onchanged(event);\n        }}\n        className=\"form-control\"\n      ></input>\n    );\n  }\n\n  if (props.type === 'text' && props.label === 'Book Title') {\n    inputtype = (\n      <input\n        value={`${props.singledata.title}`}\n        onChange={(event) => {\n          props.onchanged(event);\n        }}\n        className=\"form-control\"\n      ></input>\n    );\n  }\n\n  if (props.type === 'textarea') {\n    inputtype = (\n      <textarea\n        value={`${props.singledata.description}`}\n        onChange={(event) => {\n          props.onchanged(event);\n        }}\n        className=\"form-control\"\n      ></textarea>\n    );\n  }\n\n  return (\n    //displaying my lable and inputfiled\n    <div>\n      <label htmlFor=\"\"> {props.label}</label>\n      {inputtype}\n    </div>\n  );\n};\n\nexport default input;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from './input';\nimport { fechsinglebook } from '../../../stores/actions';\n\n\nclass UpdateForm extends Component {\n  componentDidMount() {\n    //feching single book\n    this.props.getonebookeventhandler(this.props.match.params.id);\n  }\n\n  updateHandler(event) {\n    event.preventDefault();\n    this.props.onupdateeventhander(this.props.match.params.id);\n    this.props.history.push('/admin/books');\n  }\n\n  render() {\n    console.log(this.props);\n    let UpdateBookFormArray = [];\n    // copied booklist from the state\n    for (let key in this.props.addbookform) {\n      UpdateBookFormArray.push({\n        id: key,\n        configElem: this.props.addbookform[key],\n      });\n    }\n\n    return (\n      <div>\n        <div className=\"container-fluid d-flex justify-content-center m-3\">\n          <form>\n            {UpdateBookFormArray.map((item) => (\n              <Input\n                //passing all the item from state to child component\n                key={item.id}\n                singledata={this.props.data}\n                id={item.id}\n                label={item.configElem.lable}\n                type={item.configElem.type}\n                // passing function that handle event handler\n                onchanged={(event) =>\n                  this.props.inputeventhandler1(event, item.id)\n                }\n              />\n            ))}\n\n            <div>\n              <br></br>\n              <hr />\n              <button\n                className=\"btn btn-primary\"\n                onClick={(event) => {\n                  this.updateHandler(event);\n                }}\n              >\n                update\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n// Extracting Data with mapStateToProps\nconst mapStateToProps = (state) => {\n  return { ...state.admin };\n};\n// created functions that dispatch when called,and pass those functions as props to my component.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    //getting all the input event\n    inputeventhandler1: (event, id) =>\n      dispatch({ type: 'inputevent1', event: event, id: id }),\n    //feching single book\n    getonebookeventhandler: (id) => dispatch(fechsinglebook(id)),\n    // function that handle my update button\n    onupdateeventhander: (event, id) => {\n      dispatch({ type: 'updatebook', id: id });\n    },\n  };\n};\n// connecting  a React component to a Redux store.\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateForm);\n"],"sourceRoot":""}